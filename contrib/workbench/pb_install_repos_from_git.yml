---
# All rights reserved (c) 2019-2024, Vladimir Botka <vbotka@gmail.com>
# Simplified BSD License, https://opensource.org/licenses/BSD-2-Clause

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ansible playbook
# Install git repositories
#
# Parameters:
#   my_repos_file ............. file with the list of the repos
#   my_repos_path ............. directory the repos will be fetched to
#   my_mode ................... mode fo the repos
#   my_user ................... owner of the repos
#   my_group .................. group of the repos
#   my_git_user ............... user allowed to read the repos from git
#   git_module ................ use Ansible git module instead of the command
#
# Notes:
#   * Used by ansible-workbench.sh
#   * vars are defaults. Will be overriden by --extra-vars
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# https://github.com/vbotka/ansible-ansible/tree/master/contrib/workbench

- name: Install git repositories
  hosts: localhost
  connection: local
  debugger: on_failed
  gather_facts: false

  vars:

#   my_version: 1.0.1-CURRENT
    my_version: 1.0.0

    git_module: false
    my_git_user: admin
    my_user: "{{ lookup('env','USER') }}"
    my_group: "{{ my_user }}"
    my_mode: 'u=+rwX,g=+rX-w,o=-rwx'
    my_repos_path: "{{ lookup('env','HOME') }}/.ansible"
    my_repos_file: vars/repos.yml
    my_requirements: "{{ requirements | selectattr('install', 'undefined') +
                         requirements | selectattr('install', 'defined') | selectattr('install') }}"

  tasks:

    - name: "Include list of repos from {{ my_repos_file }}"
      include_vars: "{{ my_repos_file }}"

    - name: "Debug"
      debug:
        msg: "{{ '{}'.format(msg) }}"
      vars:
        msg: |
          my_version: {{ my_version }}
          git_module: {{ git_module }}
          my_git_user: {{ my_git_user }}
          my_user: {{ my_user }}
          my_group: {{ my_group }}
          my_mode: {{ my_mode }}
          my_repos_path: {{ my_repos_path }}
          my_repos_file: {{ my_repos_file }}
          ansible_check_mode: {{ ansible_check_mode }}
          requirements:
            {{ requirements | to_nice_yaml(indent=2) | indent(2) }}
#         my_requirements:
#           {{ my_requirements | to_nice_yaml(indent=2) | indent(2) }}
      when: debug | d(false) | bool

    - name: "git install repos"
      when: git_module | bool
      git:
        repo: "{{ item.src }}"
        dest: "{{ my_repos_path }}/{{ item.name }}"
        version: "{{ item.version | d(omit) }}"
      loop: "{{ my_requirements }}"
      loop_control:
        label: "{{ item.name }}"

    - name: "command install repos"
      when: not git_module | bool
      command: |
        /bin/sh -c 'cd {{ my_repos_path }};
                    if [ -e {{ item.name|quote }} ]; then
                        (cd {{ item.name }}; git pull);
                    else
                        git clone {{ item.src }} {{ item.name }};
                    fi'
      args:
        chdir: "{{ my_repos_path }}"
      loop: "{{ my_requirements }}"
      loop_control:
        label: "{{ item.name }}"

    - name: chown, chmod and link repos
      block:

        - name: "Chown and chmod repos"
          file:
            state: directory
            recurse: true
            dest: "{{ my_repos_path }}/{{ item.name }}"
            owner: "{{ my_user }}"
            group: "{{ my_group }}"
            # mode: "{{ my_mode }}"
          loop: "{{ my_requirements }}"
          loop_control:
            label: "{{ item.name }}"

        - name: "Link repos"
          file:
            state: link
            src: "{{ my_repos_path }}/{{ item.name }}"
            dest: "{{ my_repos_path }}/{{ item.link }}"
            owner: "{{ my_user }}"
            group: "{{ my_group }}"
          loop: "{{ my_requirements | selectattr('link', 'defined') }}"
          loop_control:
            label: "{{ item.name }}"

# EOF
...
